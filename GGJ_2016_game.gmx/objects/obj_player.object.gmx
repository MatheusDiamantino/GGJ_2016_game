<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
spd = 2;
vspd = 2;
hspd = 2;
can_move = false;
flag_up = false;
flag_down = false;
flag_left = false;
flag_right = false;
img_spd = 0.04;
canShoot = true;
laser_id = 0;
state_player = DOWN;
laser_positionX = x;
laser_positionY = y;
hp = 100;
damaged = false;
knockback = false;
teleport_distance = 50;
justShot = false;
canTeleport = true;
canPlayStep = true;
whichStep = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(whichStep == 0)
{
    audio_play_sound(snd_step_1, 10, false);
    audio_sound_gain(snd_step_1, 0.3, 0);
    audio_sound_gain(snd_step_1, 0.3, 1000);
} else
{
    audio_play_sound(snd_step_2, 10, false);
    audio_sound_gain(snd_step_2, 0.3, 0);
    audio_sound_gain(snd_step_2, 0.3, 1000);
}

canPlayStep = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can teleport
canTeleport = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// KnockBack

knockback = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can be damaged

damaged = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Shoot

canShoot = true;
justShot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Input Handling
if(keyboard_check_pressed(vk_space)){
    //put sequence
    can_move = true;
    //global.state_std = MARY;
}
if(can_move){
    hspd = (keyboard_check(ord('D')) - keyboard_check(ord('A'))) * spd;
    vspd = (keyboard_check(ord('S')) - keyboard_check(ord('W'))) * spd;
    
    if(knockback == false) movement_script(hspd, vspd);
    else scr_knockback(2 * hspd, 2 * vspd);
    
    // Update depth
    depth = -y + 5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set sprites set
if(global.state_std == NORMAL){
sprites_array[0] = spr_player;
sprites_array[1] = spr_player_up;
sprites_array[2] = spr_player_down;
sprites_array[3] = spr_player_right;
sprites_array[4] = spr_player_left;
sprites_array[5] = spr_player_up_s;
sprites_array[6] = spr_player_right_s;
sprites_array[7] = spr_player_left_s;
sprites_array[8] = spr_player_down_l;
} else
if(global.state_std == MARY){
sprites_array[0] = spr_player_m;
sprites_array[1] = spr_player_up_m;
sprites_array[2] = spr_player_down_m;
sprites_array[3] = spr_player_right_m;
sprites_array[4] = spr_player_left_m;
}if(global.state_std == LSD){
sprites_array[0] = spr_player_l;
sprites_array[1] = spr_player_up_l;
sprites_array[2] = spr_player_down_l;
sprites_array[3] = spr_player_right_l;
sprites_array[4] = spr_player_left_l;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move caracter
if(can_move &amp;&amp;!knockback  &amp;&amp; !keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down)
&amp;&amp; !keyboard_check(vk_left)&amp;&amp; !keyboard_check(vk_right))
{
if x=xprevious then {
if y&lt;yprevious then {state_player = UP; image_speed = img_spd*3;sprite_index = sprites_array[1]}
else if y&gt;yprevious then {state_player = DOWN; image_speed = img_spd*3;sprite_index = sprites_array[2]}
else if state_player = DOWN then { image_speed = img_spd; sprite_index = sprites_array[0]}
else if state_player = UP then { image_speed = img_spd; sprite_index = sprites_array[5]}
else if state_player = RIGHT then { image_speed = img_spd; sprite_index = sprites_array[6]}
else if state_player = LEFT then { image_speed = img_spd; sprite_index = sprites_array[7]}}
else if y=yprevious then {
if x&lt;xprevious then {state_player = LEFT; image_speed = img_spd*3;sprite_index = sprites_array[4]}
else if x&gt;xprevious then {state_player = RIGHT; image_speed = img_spd*3;sprite_index = sprites_array[3]}
else if state_player = DOWN then { image_speed = img_spd; sprite_index = sprites_array[0]}else{image_speed = 0}}
}
if keyboard_check(vk_up){
if(y!=yprevious){
state_player = UP; image_speed = img_spd*3;sprite_index = sprites_array[1];
}else{
state_player = UP; image_speed = img_spd; sprite_index = sprites_array[5];
}
}else if keyboard_check(vk_down){
if(y!=yprevious){
state_player = DOWN; image_speed = img_spd*3;sprite_index = sprites_array[2]
}else{
state_player = DOWN; image_speed = img_spd; sprite_index = sprites_array[0]
}}
else if keyboard_check(vk_left){
if(x!=xprevious){
state_player = LEFT; image_speed = img_spd*3;sprite_index = sprites_array[4]
}else{
state_player = LEFT; image_speed = img_spd; sprite_index = sprites_array[7]
}}
else if keyboard_check(vk_right){
if(x!=xprevious){
state_player = RIGHT; image_speed = img_spd*3;sprite_index = sprites_array[3]
}else{
state_player = RIGHT; image_speed = img_spd; sprite_index = sprites_array[6]
}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Laser follows player

if(instance_exists(laser_id))
{
    if(state_player == UP) { laser_positionX = x + 12; laser_positionY = y; laser_id.image_angle = 180; laser_id.depth = -y + 6; laser_id.image_xscale = 1;}
    else if(state_player == DOWN) { laser_positionX = x - 13; laser_positionY = y - 15; laser_id.image_angle = 0; laser_id.image_xscale = 1;}
    else if(state_player == LEFT) { laser_positionX = x + 7; laser_positionY = y - 11; laser_id.image_angle = 270; laser_id.image_xscale = 0.5;}
    else if(state_player == RIGHT) { laser_positionX = x - 7; laser_positionY = y; laser_id.image_angle = 90; laser_id.image_xscale = 0.5;}
    
    laser_id.x = laser_positionX;
    laser_id.y = laser_positionY;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

if (hp &lt;= 0) room_restart();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sound step

if(canPlayStep == true ) 
{   
    if (keyboard_check(ord('A')) || keyboard_check(ord('W')) || keyboard_check(ord('S')) || keyboard_check(ord('D')))
    {
    canPlayStep = false;
    alarm[5] = 0.4 * room_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy Collision

if(damaged == false)
{
    hp -= other.damagePerSecond;
    damaged = true;
    knockback = true;
    alarm[2] = 0.25 * room_speed;
    alarm[1] = 1 * room_speed;
    timeline_add();
    timeline_index = tl_blink_player;
    timeline_loop = false;
    timeline_position = 0;
    timeline_running = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Health Bar

draw_self();

draw_healthbar(x - 25, y - 20, x + 25, y - 18, hp, c_black, c_red, c_green, 0, false, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot them lasers

if(canShoot) 
{
    canShoot = false;
    laser_id = instance_create(x, y, obj_laser);

    laser_id.image_speed = img_spd * 5;
    alarm[0] = 1 * room_speed;
    justShot = true;
    
    audio_play_sound(snd_laser, 10, false);
    audio_sound_gain(snd_laser, 0.3, 0);
    audio_sound_gain(snd_laser, 0.3, 1000);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Teleport to point

if(canTeleport)
{
    audio_play_sound(snd_teleport, 10, false);
    audio_sound_gain(snd_teleport, 0.3, 0);
    audio_sound_gain(snd_teleport, 0.3, 1000);
    canTeleport = false;
    alarm[4] = 0.5 * room_speed
    
    if(sign(vspd) == -1)
    {
        
        var yy = y;
        while(!grid_place_meeting(x, yy) &amp;&amp; yy &gt; y - teleport_distance)
        {
            --yy;
        }
        y = ++yy;
    
    } else
    if(sign(vspd) == 1)
    {
        
        var yy = y;
        while(!grid_place_meeting(x, yy) &amp;&amp; yy &lt; y + teleport_distance)
        {
            ++yy;
        }
        y = --yy;
    
    } else
    if(sign(hspd) == -1)
    {
        
        var xx = x;
        while(!grid_place_meeting(xx, y) &amp;&amp; xx &gt; x - teleport_distance)
        {
            --xx;
        }
        x = ++xx;
    
    } else
    if(sign(hspd) == 1)
    {
        
        var xx = x;
        while(!grid_place_meeting(xx, y) &amp;&amp; xx &lt; x + teleport_distance)
        {
           ++xx;
        }
        x = --xx;
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
