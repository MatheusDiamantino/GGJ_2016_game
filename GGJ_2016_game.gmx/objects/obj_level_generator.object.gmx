<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level Generator

// Init game
scr_init_game();

// Set room size
room_width = (CELL_WIDTH div 16) * 720;
room_height = (CELL_HEIGHT div 16) * 720;

// set the grid's width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Create grid
grid = ds_grid_create(width, height);

// Fill grid with void spaces
ds_grid_set_region(grid, 0, 0, width - 1, height - 1, VOID);

// Starts random number generator
randomize();

// Sets controller
var cx = width div 2;
var cy = height div 2;

// Create instance of the camera
instance_create(0, 0, obj_camera);

// Place player in the room
instance_create(cx * CELL_WIDTH + CELL_WIDTH / 2, cy * CELL_HEIGHT + CELL_HEIGHT / 2, obj_player);

// Controller's direction
var cdir = irandom(3);

// Chance of changing direction
var odds = 1;

// Create level using range of steps
repeat(irandom_range(800, 1200))
{
    // Set position to a floor
    grid[# cx, cy] = FLOOR;
    
    // Randomize direction
    if(irandom(odds) == odds)
    {
        cdir = irandom(3);
    }
    
    // updates the controller
    cx += lengthdir_x(1, cdir * 90);
    cy += lengthdir_y(1, cdir * 90);
    
    cx = clamp(cx, 1, width - 2);
    cy = clamp(cy, 1, height - 2);
}

// Sets controller (again)
var cx = width div 2;
var cy = height div 2;

repeat(irandom_range(800, 1200))
{
    // Set position to a floor
    grid[# cx, cy] = FLOOR;
    
    // Randomize direction
    if(irandom(odds) == odds)
    {
        cdir = irandom(3);
    }
    
    // updates the controller
    cx += lengthdir_x(1, cdir * 90);
    cy += lengthdir_y(1, cdir * 90);
    
    cx = clamp(cx, 1, width - 2);
    cy = clamp(cy, 1, height - 2);
}

// Delete single void between four rooms
for(var yy = 1; yy &lt; height - 1; yy++)
{
    for(var xx = 1; xx &lt; width - 1; xx++)
    {
        if(grid[# xx, yy] == VOID)
        {
            if(grid[# xx + 1, yy] == FLOOR &amp;&amp;
                grid[# xx - 1, yy] == FLOOR &amp;&amp;
                grid[# xx, yy + 1] == FLOOR &amp;&amp;
                grid[# xx, yy - 1] == FLOOR) grid[# xx, yy] = FLOOR;
        }
    }
}

// Add the tiles to the grid
for(var yy = 1; yy &lt; height - 1; yy++)
{
    for(var xx = 1; xx &lt; width - 1; xx++)
    {
        if(grid[# xx, yy] == FLOOR)
        {
            if(grid[# xx + 1, yy] != FLOOR) grid[# xx + 1, yy] = WALL;
            if(grid[# xx - 1, yy] != FLOOR) grid[# xx - 1, yy] = WALL;
            if(grid[# xx, yy + 1] != FLOOR) grid[# xx, yy + 1] = WALL;
            if(grid[# xx, yy - 1] != FLOOR) grid[# xx, yy - 1] = WALL;
        }
    }
}

// Draw the level using the grid

for(var yy = 1; yy &lt; height; yy++)
{
    for(var xx = 1; xx &lt; width; xx++)
    {
        if(grid[# xx, yy] == FLOOR) tile_add(bg_tile_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
        else if(grid[# xx, yy] == VOID) tile_add(bg_tile_void, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx * CELL_WIDTH, yy * CELL_HEIGHT, 0);
    }
}

// Get tile sizes
var tw = CELL_WIDTH / 2;
var th = CELL_HEIGHT / 2;

// Add the tiles
for (var yy = 0; yy &lt; height * 2; yy++)
{
    for(var xx = 0; xx &lt; width * 2; xx++)
    {
        if(grid[# xx div 2, yy div 2] == FLOOR)
        {
            // Get the tile's position
            var tx = xx * tw;
            var ty = yy * th;
            
            var right = grid[# (xx + 1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx - 1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy - 1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy + 1) div 2] != FLOOR;
            
            var top_right = grid[# (xx + 1) div 2, (yy - 1) div 2] != FLOOR;
            var top_left = grid[# (xx - 1) div 2, (yy - 1) div 2] != FLOOR;
            var bottom_right = grid[# (xx + 1) div 2, (yy + 1) div 2] != FLOOR;
            var bottom_left = grid[# (xx - 1) div 2, (yy + 1) div 2] != FLOOR;
            
            if(right)
            {
                if(bottom)
                {
                    tile_add(bg_tiles, tw * 4, th * 1, tw, th, tx + tw, ty, -ty - 1);
                } else if(top)
                {
                    if (top_right)
                    {
                        tile_add(bg_tiles, tw * 4, th * 0, tw, th, tx + tw, ty - th, -ty - 1);
                    } else
                    {
                        tile_add(bg_tiles, tw * 3, th * 0, tw, th, tx, ty - th, -ty - 1);
                    }
                    tile_add(bg_tiles, tw * 0, th * 1, tw, th, tx + tw, ty, -ty - 1);
                } else tile_add(bg_tiles, tw * 0, th * 1, tw, th, tx + tw, ty, -ty - 1);
            }
            
            if(left)
            {
                if (bottom)
                {
                    tile_add(bg_tiles, tw * 3, th * 1, tw, th, tx - tw, ty, -ty - 1);
                } else if (top)
                {
                    if(top_left)
                    {
                        tile_add(bg_tiles, tw * 3, th * 0, tw, th, tx - tw, ty - th, -ty - 1);
                    } else
                    {
                        tile_add(bg_tiles, tw * 4, th * 0, tw, th, tx, ty - th, -ty - 1);
                    }
                    tile_add(bg_tiles, tw * 2, th * 1, tw, th, tx - tw, ty, -ty - 1);
                } else
                {
                    tile_add(bg_tiles, tw * 2, th * 1, tw, th, tx - tw, ty, -ty - 1);
                }
            }
            
            if (top)
            {
                if (!top_right)
                {
                    tile_add(bg_tiles, tw * 2, th * 2, tw, th, tx, ty - th, -ty - 1);
                } else if(!top_left)
                {
                    tile_add(bg_tiles, tw * 0, th * 2, tw, th, tx, ty - th, -ty - 1);
                } else {
                    tile_add(bg_tiles, tw * 1, th * 2, tw, th, tx, ty - th, -ty - 1);
                }
            }
            
            if (bottom)
            {
                if (!bottom_right)
                {
                    tile_add(bg_tiles, tw * 2, th * 0, tw, th, tx, ty, -ty - 1);
                } else if(!bottom_left)
                {
                    tile_add(bg_tiles, tw * 0, th * 0, tw, th, tx, ty, -ty - 1);
                } else {
                    tile_add(bg_tiles, tw * 1, th * 0, tw, th, tx, ty, -ty - 1);
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart room

room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
